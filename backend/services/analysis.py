import json
import anthropic
from typing import List, Dict, Any, Tuple
from models.analysis_results import Task, Decision, Topic, Insight
import traceback
import logging
import asyncio

logger = logging.getLogger(__name__)

class AnalysisWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Claude API"""
    
    def __init__(self, api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            api_key: Anthropic API –∫–ª—é—á
        """
        self.client = anthropic.Anthropic(api_key=api_key)
        self.model = "claude-3-sonnet-20240229"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Sonnet –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        print("‚úÖ AnalysisWorker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _call_claude(self, prompt: str, system_prompt: str) -> str:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ Claude API
        
        Args:
            prompt: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Claude
        """
        try:
            response = self.client.completions.create(
                model="claude-2",
                prompt=f"{system_prompt}\n\n{prompt}",
                max_tokens_to_sample=1024,
                temperature=0.7
            )
            return response.completion
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Claude API: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å Claude: {str(e)}")
    
    async def analyze_content(self, transcription: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        print("üîç –í–æ—Ä–∫–µ—Ä 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π...")
        
        system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤—Å—Ç—Ä–µ—á–∏ –∏ –≤—ã–¥–µ–ª–∏:

1. –¢–ï–ú–´ (topics) - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
2. –†–ï–®–ï–ù–ò–Ø (decisions) - –ø—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è
3. –¢–ò–ü –í–°–¢–†–ï–ß–ò (meeting_type) - —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏ (standup, planning, review –∏ —Ç.–¥.)
4. –û–¶–ï–ù–ö–ê –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò (effectiveness_score) - –æ—Ç 1 –¥–æ 10

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""

        try:
            response = await self._call_claude(transcription, system_prompt)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            result = json.loads(response)
            
            return {
                "topics": result.get("topics", []),
                "decisions": result.get("decisions", []),
                "meeting_type": result.get("meeting_type", "general"),
                "effectiveness_score": result.get("effectiveness_score", 5)
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_content: {str(e)}")
            return {
                "topics": [],
                "decisions": [],
                "meeting_type": "error",
                "effectiveness_score": 0
            }

    async def extract_tasks(self, transcription: str) -> List[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –ø—É–Ω–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
        """
        print("üìã –í–æ—Ä–∫–µ—Ä 3: –ò–∑–≤–ª–µ–∫–∞—é –∑–∞–¥–∞—á–∏ –∏ –ø—É–Ω–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π...")
        
        system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤. –ù–∞–π–¥–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏, –ø—É–Ω–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π, –ø–æ—Ä—É—á–µ–Ω–∏—è.
–î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ —É–∫–∞–∂–∏:
- –æ–ø–∏—Å–∞–Ω–∏–µ
- –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
- —Å—Ä–æ–∫
- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high/medium/low)

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""

        try:
            response = await self._call_claude(transcription, system_prompt)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            tasks = json.loads(response)
            
            return tasks
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ extract_tasks: {str(e)}")
            return []

    async def generate_insights(self, transcription: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        print("üí° –í–æ—Ä–∫–µ—Ä 4: –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Å–∞–π—Ç—ã, —Ä–∏—Å–∫–∏ –∏ –æ—Ü–µ–Ω–∫—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
        
        system_prompt = """–¢—ã - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–µ–ª–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤—Å—Ç—Ä–µ—á–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:

1. –î–ò–ù–ê–ú–ò–ö–ê –ö–û–ú–ê–ù–î–´ (team_dynamics) - –æ—Ü–µ–Ω–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
2. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–û–¶–ï–°–°–£ (process_recommendations) - –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
3. –†–ò–°–ö–ò (risk_flags) - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
4. –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –î–ê–õ–¨–ù–ï–ô–®–ò–ú –î–ï–ô–°–¢–í–ò–Ø–ú (follow_up_suggestions)

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""

        try:
            response = await self._call_claude(transcription, system_prompt)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            insights = json.loads(response)
            
            return {
                "team_dynamics": insights.get("team_dynamics", ""),
                "process_recommendations": insights.get("process_recommendations", []),
                "risk_flags": insights.get("risk_flags", []),
                "follow_up_suggestions": insights.get("follow_up_suggestions", [])
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_insights: {str(e)}")
            return {
                "team_dynamics": "",
                "process_recommendations": [],
                "risk_flags": ["–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"],
                "follow_up_suggestions": []
            }

    async def analyze(self, transcription: str) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            content_result, tasks_result, insights_result = await asyncio.gather(
                self.analyze_content(transcription),
                self.extract_tasks(transcription),
                self.generate_insights(transcription)
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "content_analysis": content_result,
                "tasks": tasks_result,
                "insights": insights_result,
                "status": "success"
            }
            
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            return {
                "content_analysis": {
                    "topics": [],
                    "decisions": [],
                    "meeting_type": "error",
                    "effectiveness_score": 0
                },
                "tasks": [],
                "insights": {
                    "team_dynamics": "",
                    "process_recommendations": [],
                    "risk_flags": ["–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"],
                    "follow_up_suggestions": []
                },
                "status": "error",
                "error": str(e)
            }