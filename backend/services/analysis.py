import json
import anthropic
from typing import List, Dict, Any, Tuple
from models.analysis_results import Task, Decision, Topic, Insight
import traceback
import logging
import asyncio

logger = logging.getLogger(__name__)

class AnalysisWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Claude API"""
    
    def __init__(self, api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            api_key: Anthropic API –∫–ª—é—á
        """
        self.client = anthropic.Anthropic(api_key=api_key)
        self.model = "claude-3-sonnet-20240229"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Sonnet –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        print("‚úÖ AnalysisWorker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _call_claude(self, prompt: str, system_prompt: str) -> str:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ Claude API
        
        Args:
            prompt: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Claude
        """
        try:
            response = self.client.completions.create(
                model="claude-2",
                prompt=f"{system_prompt}\n\n{prompt}",
                max_tokens_to_sample=1024,
                temperature=0.7
            )
            return response.completion
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Claude API: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å Claude: {str(e)}")
    
    async def analyze_content(self, transcription: str) -> Dict[str, Any]:
        return {
            "topics": [
                {"topic": "UI Design Review", "summary": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫ UI", "duration_estimate": "15 –º–∏–Ω"},
                {"topic": "API Development", "summary": "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API", "duration_estimate": "12 –º–∏–Ω"},
                {"topic": "Testing Strategy", "summary": "–ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "duration_estimate": "10 –º–∏–Ω"},
                {"topic": "Release Planning", "summary": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞", "duration_estimate": "8 –º–∏–Ω"}
            ],
            "decisions": [
                {"decision": "–§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å UI –¥–æ 20 –∏—é–Ω—è", "context": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π", "impact": "–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–ª–∏–∑"},
                {"decision": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "context": "API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "impact": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞"}
            ],
            "meeting_type": "weekly_sync",
            "effectiveness_score": 7.5
        }

    async def extract_tasks(self, content: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # MOCK: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        return [
            {
                "id": "1",
                "task": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "assignee": "Sarah Johnson",
                "deadline": "2025-06-20",
                "priority": "high",
                "status": "pending",
                "context": "–í–∞–∂–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"
            },
            {
                "id": "2",
                "task": "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                "assignee": "Michael Wong",
                "deadline": "2025-06-22",
                "priority": "medium",
                "status": "pending",
                "context": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–µ–ª–∏–∑–∞"
            },
            {
                "id": "3",
                "task": "–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API",
                "assignee": "Alex Chen",
                "deadline": "2025-06-25",
                "priority": "high",
                "status": "pending",
                "context": "–ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"
            }
        ]

    async def generate_insights(self, transcription: str) -> Dict[str, Any]:
        return {
            "team_dynamics": "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–∞–∂–µ–Ω–Ω–æ, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞.",
            "process_recommendations": ["–ü—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∏ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"],
            "risk_flags": [
                "Potential delay in the API integration due to third-party service issues",
                "Limited testing resources might affect quality assurance"
            ],
            "follow_up_suggestions": ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ 3 –¥–Ω—è", "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–æ–≤"]
        }

    async def analyze(self, transcription: str) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            content_result, tasks_result, insights_result = await asyncio.gather(
                self.analyze_content(transcription),
                self.extract_tasks(transcription),
                self.generate_insights(transcription)
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "content_analysis": content_result,
                "tasks": tasks_result,
                "insights": insights_result,
                "status": "success"
            }
            
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            return {
                "content_analysis": {
                    "topics": [],
                    "decisions": [],
                    "meeting_type": "error",
                    "effectiveness_score": 0
                },
                "tasks": [],
                "insights": {
                    "team_dynamics": "",
                    "process_recommendations": [],
                    "risk_flags": ["–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"],
                    "follow_up_suggestions": []
                },
                "status": "error",
                "error": str(e)
            }